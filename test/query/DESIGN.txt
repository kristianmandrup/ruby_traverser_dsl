Query API
---------

code = parse(str)

Actions:
* Find: SearchAction  
* Where: FilterAction

Find: 
creates a SearchAction 
Defines what to be found within the current context. 
The list of found objects become the new context               
- returns SearchResult
Result of the SearchAction is the Ruby Code object found

Where:
creates a FilterAction
operates on a SearchResult and filters it to return a new SearchResult


Find - Where
------------
Find is used to indicate what type of element to find, much like a FROM in SQL
Where clauses are used to further filter all matches of the find 
                                             
# find the first class called 'Hello' which have a superclass called 'Hi'
code.find_first(:class, 'Hello').where(:superclass, 'Hi')

# find all classes called 'Hello' which have a superclass called 'Hi', and then return the last
code.find(:class, 'Hello').where(:superclass, 'Hi').last

# find all method calls to hello which have an argument 'a' as one of its params (default :any)
code.find(:call, 'hello').where(:arg => 'a')

# find all method calls to hello which have only one argument 'a'
code.find(:call, 'hello').where(:only, :arg => 'a')

# find all method calls to hello which have only the arguments 'a' AND 'b', but in any order
code.find(:call, 'hello').where(:only, :args => ['a', 'b])

# find all method calls to hello which have only the arguments 'a' AND 'b' in exactly the order given
code.find(:call, 'hello').where(:exactly, :args => ['a', 'b])

# find all method calls to hello which have only an argument 'a' and any of the block_params x or y
code.find(:block, 'hello_you').where(:only, :arg => 'a').and(:any, :param => ['x', 'y'])

# find all method calls to hello which have only an argument 'a' and NOT any of the block_params x or y
code.find(:block, 'hello_you').where(:only, :arg => 'a').and(:not, :any, :param => ['x', 'y'])

# find all method calls to hello which have only an argument 'a' and NOT any of the block_params x or y

code.find(:block, 'hello_you').where(:only, :arg => 'a') do
  where(:not, :any, :param => ['x', 'y'])
end

Find and Where each return SearchResult. Where further filters result of Find operation
Find also determines the target kind of object to return!

# filters in block
code.find(:block, 'hello_you') do
  where(:not, :any, :param => ['x', 'y'])
  where(:only, :arg => 'a')
end

Notice the confitional logic
:only, :exactly - AND
:any - OR
:not - NOT

There should be a Program container act as a Enumeration of Ruby::Program, and have a select method
This allows you to find the code file(s) matching a given condition 

# load all programs using a FileList (rake)
programs.load(FileList['test/**/*.rb'])

# find program with only one Module called Hello
programs.find(:only, :module => 'Hello')

# find program which does NOT only have one Module called Hello
programs.find(:not, :only, :module => 'Hello')

# find program with any Module called Hello
programs.find(:any, :module => 'Hello')

# find program without any Module called Hello
programs.find(:not, :any, :module => 'Hello')


Combination API
---------------

# find method named blip which has only the arguments 'a' and 'b' (in any order!)
# then with this method in hand change the name
# and then operate on the arguments in a block
# first change the argument 'a' to 'x'
# then change the argument 'x' to 'y' and delete the argument 'b' (now 'y' and 'b')
# then right after 'b' insert new argument using the code 'last_arg = []', argument with a default value of an empty array
# for the third argument ('last_arg') append with new argument 'real_last = {}'
# for the arg 'real_last' prepend with arg 'before_last_arg', but this is an exploded array arg as denoted by the :star     
# lastly prepend the args list with the arg 'first_arg'

def blip(a, b)
=> 
def blap(first_arg, y, b, last_arg = [], *before_last_arg, real_last = {})

node.find(:method => 'blip').where(:only, :args => ['a', 'b']) do |method|
  method.name = 'blap'
  method.with(:args) do |args|
    args.update(:a).with(:x) # returns updated args for futher chaining
    args.update(:x).with(:y).delete!(:b) # here chaining is used
    args.after(:b).append(:code => 'last_arg = []')
    args.at[2].append(:code => 'real_last = {}')
    args.where(:real_last).prepend(:star => :before_last_arg)
    args.prepend(:first_arg)
  end
end    

node.find(:method => 'blip').where(:only, :args => ['a', 'b']) do |method|
  method.name = 'blap'
  method.with(:args) do |args|
    args[:a] = :x # returns updated args for futher chaining
    args[:x] = :y
    args - :b
    args.insert(:after, :b).code('last_arg = []')
    args[2].append(:code => 'real_last = {}')
    args[:real_last].prepend(:star => :before_last_arg)
    args.prepend(:first_arg)
  end
end    


  

Ruby::Program 
-------------
# enumerable that operates on statements
code.statements
code[0] # statement #0
code.each

Ruby::Module
------------
# convenience finders, all returns Enumerations
.classes
.modules
.includes
.methods(:all)
.methods(:self)
.methods(:instance) # default

Enumeration on statements

.name
.name(:namespaces) - list of namespaces from name


Ruby::Class
-----------
Inherits from Ruby::Module

superclass.name
superclass.name(:namespaces)

Find Class:
code.find(:any, class => 'Hello').where(:superclass, 'Hi').last

# find all modules in any program where the modules has inside it any class with the name 'Hello' and superclass 'Hi'
programs.find(:module).where(:any, :class => 'Hello').where(:superclass, 'Hi').last

# find class Hello with conditions
programs.find(:class => 'Hello').where(:any, :method => 'hello')

Find inside Class:
* All statements are valid

Ruby::Method
------------
name
params # default for enumeration

Self:
:param
:name

Statements:
NOT
:class
:module 
:method

Ruby::Call
------------
name                          
args # default for enumeration

Self:
:arg
:name

Ruby::Block
------------                  
Inherits from Ruby::Call
params

Self:
:arg
name

Statements:
NOT
:class
:module 
:method

Ruby::ArgsList
------------                  

Ruby::Arg
------------                  
hash_assoc(index)



