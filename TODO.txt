Every manipulation function should have two variants, ! and normal:


Insert tests
------------
:before
:after
:pos


call_node.args.insert(:first).with(:a)
call_node.params.insert(:last).with(:a)
call_node.params.insert_at(2).with(:a)

call_node.insert(:arg, :pos => :first).with(:a)
call_node.insert(:param, :pos => :first).with(:a)

call_node.params.insert(:after, :x).with(:a)
call_node.args.insert(:before, :x).with(:a)
call_node.args.insert(:pos => 2).with(:a)

call_node.params.before(:first).insert(:a)
call_node.params.after(:first).insert(:a)

call_node.params.after(:last).insert(:a)
call_node.params.before(:last).insert(:a)
call_node.params.after(:x).insert(:a)
call_node.args.before(:x).insert(:a)
call_node.args.after(:pos => 2).insert(:a)

call_node.after(:param, :last).insert(:a)
call_node.before(:param, :last).insert(:a)
call_node.before(:arg => :x).insert(:a)
call_node.after(:pos => 2).insert(:a)

Delete
------
Go through again

# res is a copy of node where child is removed
res = node.find(child select).delete 

# res is a copy of node where child is removed
res = node.delete(child select) 

# res is node where child is removed (no copy)
res = node.delete!(child select)

# res is true if delete was successful
res = node.delete!

# delete list of nodes
res = node.from(:pos => 2).to(:after, :x).delete!
res = node.from(:pos => 2).delete!

res = node.args.select(:pos => 2).select(:pos => 5) do |list|
  list[0].delete!
  list[1].update(:value, 32)
end

Update
------
Go through again

# res is a copy of node where child is updated
res = node.find(child select).update(value) 

res = node.before(:arg, :x).update.with('y') 
res = node.before(:arg, :x).update_with(:code => 'call_me(5)') 
res = node.before(:arg, :x).update_with(my_other_node) 
res = node.args.before(:x).update(:y).with(['y', 2]) 

# res is a copy of node where child is update
res = node.update(child select).with(value) 

# res is node where child is removed (no copy)
res = node.update!(child select)


